TO DO
- infinite scroll 
- fix delete --> & do aws
- justin: infinite scroll
- dammy: upload date






LIMIT 12


<<<<<<< HEAD:notizen.txt
Here are your credentials.

=======
>>>>>>> 919a67f2a4c7fbaeded75a4cf58e10e406b00129:readme.txt

Please exercise the utmost caution when handling these credentials. DO NOT COMMIT THEM. If you do accidentally commit them, please return here to invalidate them and get a new set. 



2) index.html:
- link to vue
* all of vue is in that javascript file --> view is very small!!!
* source code of view! --> 10800 lines of code   

Homework:
- cards arranged in a grid on big screens, a column on small screen

--> spiced-pg 
--> run a query 

<div v-for="picture in cuteAnimals">{{picture.title}}<img v-bind:src="url" width="200"/></div>



5) FOR FILES: I NEED TO USE AN EVENT-LISTENER called change 
add function <input @change="handleChange" type="file" name="file" accept="image/*">
handlebchange
--> access to uploaded file: console.log("file: ", e.target.files[0]);

---------------------------------------------------------------------------------
CONSOLE LOGS
-SCRIPT.JS --> handleclick function

methods: {
            handleClick: function (e) {
                e.preventDefault();
console.log("this! ", this);
/*
                cuteAnimals: Array(3)
                description: "a"
                file: File
                    name: "IMG_0239.JPG"
                    size: 1038994
                    type: image/jpeg
                    webkitRelativePath: ""
                heading
                subheading
                data: 
                    cuteAnimals: Array(3)
                    description: "a"
                    file: File
                    title: "a"
                    username: "a"
                */

                var formData = new FormData();
                formData.append("title", this.title);
                formData.append("description", this.description);
                formData.append("username", this.username);
                formData.append("file", this.file);

                axios
                    .post("/upload", formData)
                    .then(function (resp) {
console.log("response from post upload ", resp);
                        //data: success: false (wenn ich kein Bild hochgeladen hab)
                        //data: {success: true}
                        --> siehe server log
                    })
                    .catch(function (err) {
                        console.log("err from POST upload", err);
                    });
            },
            handleChange: function (e) {
                console.log("handleChange is running!");
console.log("file: ", e.target.files[0]);
                /*
                file: 
                name: "IMG_0239.JPG"
                size: 1038994
                type: image/jpeg
                webkitRelativePath: ""
                */

                this.file = e.target.files[0];
            },

-------------------------------------------------------------------------------------------------------------
IN INDEX.JS
app.post("/upload", uploader.single("file"), (req, res) => {

console.log("file", req.file);
    /*
            file {
                fieldname: 'file',
                originalname: 'IMG_0238.JPG',
                encoding: '7bit',
                mimetype: 'image/jpeg',
                destination: '/home/angela/Schreibtisch/spicedfiles/cumin-imageboarding/cumin-imageboard/uploads',
                filename: '0omIUVpa0h7S26bFgqZro4KBw3zq2gJ3.JPG',
                path: '/home/angela/Schreibtisch/spicedfiles/cumin-imageboarding/cumin-imageboard/uploads/0omIUVpa0h7S26bFgqZro4KBw3zq2gJ3.JPG',
                size: 1038594
            }

    */
console.log("input", req.body);

    /*
        input [Object: null prototype] {
                title: 'a',
                description: 'a',
                username: 'a'
                }


    */



NOW DO A NEW ROUTE

app.post("/upload", uploader.single("file"), (req, res));

--> now moulter adds the file to the request object



URL TO EACH IMAGE:
-filename we created 
- aws-part    

s3: has a function called upload
- file-object will be avaiable there 

//const url = `https://s3.amatonaws.com/spicedling/${filename}`
    //get url from config.json

PART 3
- make image clickable --> modal pops up, comment is allowed

let cuteAnimals = [name: "giraffe",
cutenessScore: 7,
id: 10];

--> use id or name

--> when I click on an animal, take id of animal, and store that in data
1) add a new property of data of vue instance 
2) write method handleClickModal
in html: --> I already loop through the array. each instance is stored in an animal --> animal.name 
i ican do: <p>{{picture.title}}, {{picture.id}}</p>
--> handleclick is a function!!!!
--> i can pass it an argument
<div v-if='cutePictures.length > 0' class="images">
            <div class="card" v-for="picture in cutePictures" @click="handleClickModal(picture.id)">
                <img v-bind:src="picture.url" width="100%" height="80%"/>
                <div class="container">
                    <p>{{picture.title}}, {{picture.id}}</p>
                </div>
            </div>
                
                
</div>

3) put id in data 
in handleclickmodal:
this.pictureId = id;

4) now the vue instance needs to inform the vue modal which picture was clicked

CONCEPT CALLED PROPS
--> pass inforamtion from parent to child 
- data-flow is top-down --> parents give info to children, but children cannot pass info to parent

1) in javascript:
--> add props array component
tell vue component that it will be passed a prop 
Vue.component("my-first-component", {
        template: "#my-first-component",
        //props will be an array of strings
        props: [],
        data: function () {

2) tell component what it will be passed
--> instance in data-object of main vue instance!
 props: ["pictureId"],

--> name of variable: is in props
--> value of variable: data-property in main vue instance

 3) in html:
 <my-first-component :picture-id="pictureId" v-if='showModal'></first-component>
 --> add an attribute --> in html: always use kebab-case!!!
 attribute: everytime I have a = in the code
 --> picture-id is referring to animalid in props of component
--> "pictureId" references animalid in vue instance!!!

--> I am basically declaring a variable, name: in component, value: in parent

4) check that this worked
--> console.log this in component
mounted: function () {
            //console.log("my component has mounted!!!!");
            console.log("this in component: ", this);
            //i can use axios to make a request to server to get data
        },
--> we care about pictureID
this.pictureId 

5) if I want to add more propertys:
props: ["pictureId", "cutenessScore"],
<my-first-component :picture-id="pictureId" :cuteness-Score="cutenessScore" v-if='showModal'></first-component>


THE MODAL:
- use CSS to make it look like a modal 
- DB: when component mounts: make at least one request to server 
--> get info about the picture (name, desc, title, url)
--> get info about comments

ERGEBNIS: modal showing up with info


COMMENTS: 
- new table: --> see class notes 

ADDING COMMENTS TO MODAL
- add component 2 input fields & submit button
--> same stuff we did yesterday --> bind the input with props in the vuew components data object 
--> no files, no amazon!!!

- when submit button is clicked:
run function with post request to server 
send username & comment & imageId
--> axios (store username and rest of stuff in object i send to post)
--> copy-paste middleware (app.use(express.json());)

--> vue component: do the same thing with the comment as we did in view instance 

--> x-button: set showModal to false

this.$emit



exports.getMoreImages = (startId, offset) => db.query(
        `SELECT * FROM images
        WHERE id < $1
        ORDER BY id DESC
        LIMIT 10
        OFFSET $2`,
        [startId, offset]
    ).then(
        ({rows}) => rows
    );
};

------------------------------------------------------------------------------------------------------------
1) MAKE THE URL change
1) indexhml:
<div class="container" v-for="image in cuteImages" >
                <a :href="'#' + image.id">

                <img v-bind:src="image.url" width="100%" height="80%"/>
                <div class="card">
                    <p>{{image.title}}, {{image.id}}</p>
                </div>
                </a>
            </div>
--> wrap image in anchor-tag 
--> when I click this: hash + id gets added to url  
//http://localhost:8080/#29

--> :href --> binding gets me the dynamic value, not the literal string "image.id"


2) now tell vue to do something with that info!!!
--> WE NOW TELL VUE THE IMAGE ID FROM THE URL
--> in vue 

 new Vue({
        el: "main",
        data: {
            heading: "I ðŸ˜½ PIXELS",
            subheading: "Latest Images",
            cuteImages: [],

            //add property of animal that was clicked
            imageId: location.hash.slice(1),


--> set location.hash.slice(1) as initial value
--> if there is nothing: it will be an empty string which is falsy 
--> so modal will only show up is imageId is there
NOW WE HAVE LINK SHARING FUNCTIONALITY!!!
--> it goes hand in hand with v-if-image-id in html

3) NOW MAKE MODAL SHOW up
--> we need to add a listener: we want to know when the url changes  
--> when url changes: take that new number from imageId and render the modal 

in main vue instance
mounted: function () {
            console.log("mounted is running!!!!");
            //console.log("this befrore then", this);
            var that = this;

            axios
                .get("/images")

                .then(function (resp) {
                    y with lastId: ", that);
                })
                .catch(function (err) {
                    console.log("err in Get cuteImages: ", err);
                });
        //this code makes modal appear when I click different images because data property is being updated
            window.addEventListener("hashchange", function () {
                console.log("hash change has fired!!!");
                console.log("location.hash", location.hash);
                that.imageId = location.hash.slice(1);
            });
    

ALSO: in closeModal: set location.hash to an empty string
closeModal: function () {
                console.log("trying to use emit for closing");
                //this.imageId = "";
                location.hash = "";
            },


VUE LOOKS AT DATA.
WHENEVER DATA GETS CHANGED, THE SITE CHANGES!!!


4) now: MAKE MODAL CHANGE WHEN i CHANGE THE URL MANUALLY

--> if ID changes: you have to get the information from database!
--> component does not run again. but it has to.

solution: 
vue has something called WATCHERS

watchers: funtion that runs when one of the props of the component changes

--> needs to be assigned to a prop

--> add wathcer to component

after mounted function:
watch: {
            //whenver the prop imageID changes, this function will run
            imageId: function () {
                console.log("message from watch: imageID changing!!!!");
            },
        }

5) ADD BONUS EVENT

easy: next / previos button:
1) if last image on the screen: no previos 
2) how to:
- subquery 
--> find info about image that was loaded 
--> do also query for previous / next one, use id 

-------------------
HARD: LIST OF TAG 
- new input field    
- show tag when module  

--> new table as well 
--> I neee to do server side clean up   
-------------------------
MEDIUM: NOTIFY USERS: 
if new image got uploaded while user is on site and ask them to reload 
--> function that runs every 5 secods that runs the query based on last image   
--> is there another ID that came after? 

----------------------------------------
HARD: UPLOAD FROM THE URL
--> pure node http-request 
--> package: cherio 

----------------------------------------
reply to a comment 
--> tricky part: CSS

-------------------------------------
easy/medium: allow users to delete images 
--> any user can delete any image 
tricky part: 
delete-button on modal 

--> rerender the page
--> delete comments as well 
--> medium: delete on aws as well


--> only work with data 

medium: delete it on aws as well  
